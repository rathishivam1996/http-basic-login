server:
  port: "8080"

spring:
  # datasource config.
  datasource:
    # driverClassName: com.mysql.cj.jdbc.Driver
    driverClassName: org.h2.Driver
    # username: root
    username: sa
    # password: '745826'
    password: 
    # url: jdbc:mysql://localhost:3306/login?createDatabaseIfNotExist=true
    generate-unique-name: 'false'
    name: login    
    url: jdbc:h2:mem:login
  # spring.data.jpa config.  
  
  h2:
    console:
      enabled: true
  
  data:
    jpa:
      repositories:
        enabled: 'true'
        
  # Spring Boot will let you set any available hibernate property using:
  # spring.jpa.properties.*
  jpa:
    properties:
      hibernate:
        # dialect: org.hibernate.dialect.MySQLDialect
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: 'true'
        
    show-sql: 'true'  
      
    # database: mysql
    database: h2
    
    # geterates queries for specific database platform.
    # database-platform: org.hibernate.dialect.MySQLDialect
    database-platform: org.hibernate.dialect.H2Dialect
    
    # ddl (data discription language) config.
    hibernate:
      ddl-auto: create

logging:
  level:
    org:
      springframework:
        security: DEBUG    
      hibernate:
        SQL: DEBUG        
        type:
          descriptor:
            sql:
              BasicBinder: TRACE

 
#server.port = 8080
#logging.level.org.springframework.security=DEBUG
#
#
## spring.jpa.hibernate.ddl-auto is JPA specific and is passed to hibernate.hbm2ddl.auto at startup.
## Use one of create/update/create-update    
## 1) In test case scenarios=create-drop
## so that you create your schema, your test case adds some mock data, you run your tests,
## and then during the test case cleanup, the schema objects are dropped, leaving an empty database.
## 2) In development=update 
## Developers use update to automatically modify the schema to add new additions upon restart
## 3) it's often highly recommended you use=none
#spring.jpa.hibernate.ddl-auto=create
#
## This property helps generate platform specific SQL
## can also use spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect, if using innoDB
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
## If your MySql version 5 then use MySQL5Dialect
#
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#
#spring.datasource.url=jdbc:mysql://localhost:3306/login?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=745826
#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
## For h2:
## spring.datasource.driverClassName=org.h2.Driver
## spring.datasource.name=travelservice
## spring.datasource.url=jdbc:h2:mem:login
## spring.h2.console.enabled=true
#
## Enable spring data repos
#spring.data.jpa.repositories.enabled=true
#
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.database=mysql
#
## Hibernate properties
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE  
